var _user$project$Main$generateCard = function (task) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('row'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('col-sm-12 display-2'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: task.complete ? A2(
								_elm_lang$html$Html$i,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Mark incomplete'),
									_1: {ctor: '[]'}
								}) : A2(
								_elm_lang$html$Html$i,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Mark done!!'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(task.todoName),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$i,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Delete'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		A2(_elm_lang$core$List$map, _user$project$Main$generateCard, model.todoList));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'NoOp') {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			if (_p0._0.ctor === 'Ok') {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{todoList: _p0._0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			} else {
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		}
	});
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$TodoTask = F2(
	function (a, b) {
		return {todoName: a, complete: b};
	});
var _user$project$Main$extractDetails = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'complete',
	_elm_lang$core$Json_Decode$bool,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'task_name',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$TodoTask)));
var _user$project$Main$extractList = _elm_lang$core$Json_Decode$list(_user$project$Main$extractDetails);
var _user$project$Main$Model = function (a) {
	return {todoList: a};
};
var _user$project$Main$OnHttpResponse = function (a) {
	return {ctor: 'OnHttpResponse', _0: a};
};
var _user$project$Main$fetchInitialTodo = function () {
	var url = 'http://localhost:4000/api/todos';
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$OnHttpResponse,
		A2(_elm_lang$http$Http$get, url, _user$project$Main$extractList));
}();
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: _user$project$Main$Model(
		{ctor: '[]'}),
	_1: _user$project$Main$fetchInitialTodo
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
var _user$project$Main$NoOp = {ctor: 'NoOp'};
